     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  
     7                                  extern exit, printf, scanf, fprintf, fread, fopen              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 00<rept>                    s times 100 db 0
    17 00000064 696E7075742E747874-         fileinput db "input.txt", 0
    17 0000006D 00                 
    18 0000006E 6F75747075742E7478-         fileoutput db "output.txt", 0
    18 00000077 7400               
    19 00000079 7200                        acces_mode_r db "r",0
    20 0000007B 7700                        acces_mode_w db "w", 0
    21 0000007D 00000000                    fd_in dd 0
    22 00000081 00000000                    fd_out dd 0
    23 00000085 25640A00                    format_1 db "%d", 10, 0
    24 00000089 257300                      scanf_format db "%s", 0
    25 0000008C 00<rept>                    input_from_user times 100 db 0
    26 000000F0 20257300                    printf_format db " %s", 0
    27 000000F4 00000000                    number_of_characters dd 0
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32 00000000 68[79000000]                    push dword acces_mode_r
    33 00000005 68[64000000]                    push dword fileinput
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2
    36 00000013 A3[7D000000]                    mov [fd_in], eax
    37                                          
    38 00000018 68[7B000000]                    push dword acces_mode_w
    39 0000001D 68[6E000000]                    push dword fileoutput
    40 00000022 FF15[00000000]                  call [fopen]
    41 00000028 83C408                          add esp, 4*2
    42 0000002B A3[81000000]                    mov [fd_out], eax
    43                                          
    44 00000030 FF35[7D000000]                  push dword [fd_in]
    45 00000036 68C8000000                      push dword 200
    46 0000003B 6A01                            push dword 1
    47 0000003D 68[00000000]                    push dword s
    48 00000042 FF15[00000000]                  call [fread]
    49 00000048 83C410                          add esp, 4*4
    50 0000004B A3[F4000000]                    mov [number_of_characters], eax
    51                                          
    52 00000050 FF35[F4000000]                  push dword [number_of_characters]
    53 00000056 68[85000000]                    push dword format_1
    54 0000005B FF35[81000000]                  push dword [fd_out]
    55 00000061 FF15[00000000]                  call [fprintf]
    56 00000067 83C40C                          add esp, 4*3
    57                                      
    58                                          ; exit(0)
    59 0000006A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 0000006C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
