     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  
    13                                  ;Read two doublewords a and b in base 16 from the keyboard. Display the sum of the low parts of the two numbers and the difference between the high parts of the two numbers in base 16 Example:
    14                                  ;a = 00101A35h
    15                                  ;b = 00023219h
    16                                  ;sum = 4C4Eh
    17                                  ;difference = Eh
    18                                  
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21 00000000 00000000                    x dd 0
    22 00000004 00000000                    y dd 0
    23 00000008 25786800                    scanf_format db "%xh", 0
    24 0000000C 73756D203D20255868-         printf_sum_format db "sum = %Xh",10,0
    24 00000015 0A00               
    25 00000017 646966666572656E63-         printf_diff_format db "difference = %Xh",0
    25 00000020 65203D2025586800   
    26 00000028 00000000                    sum dd 0
    27 0000002C 00000000                    diff dd 0
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      solve:
    32 00000000 8B442408                        mov eax, [esp+8]
    33 00000004 8B5C2404                        mov ebx, [esp+4]
    34                                          
    35 00000008 50                              push eax
    36 00000009 6658                            pop ax
    37 0000000B 665A                            pop dx
    38 0000000D 53                              push ebx
    39 0000000E 665B                            pop bx
    40 00000010 6659                            pop cx
    41                                          
    42                                          ; dx:ax = a, cx:bx = b
    43                                          
    44 00000012 6601D8                          add ax,bx
    45 00000015 6629CA                          sub dx,cx
    46                                          
    47 00000018 C3                              ret
    48                                      
    49                                      start:
    50 00000019 68[00000000]                    push dword x
    51 0000001E 68[08000000]                    push scanf_format
    52 00000023 FF15[00000000]                  call [scanf]
    53 00000029 83C408                          add esp, 4*2
    54                                          
    55 0000002C 68[04000000]                    push dword y
    56 00000031 68[08000000]                    push scanf_format
    57 00000036 FF15[00000000]                  call [scanf]
    58 0000003C 83C408                          add esp, 4*2
    59                                          
    60 0000003F FF35[00000000]                  push dword[x]
    61 00000045 FF35[04000000]                  push dword[y]
    62 0000004B E8B0FFFFFF                      call solve
    63                                          ;dx - diff, ax - sum
    64                                          
    65 00000050 98                              cwde
    66 00000051 A3[28000000]                    mov [sum], eax
    67                                          
    68 00000056 6689D0                          mov ax, dx
    69 00000059 98                              cwde
    70 0000005A A3[2C000000]                    mov [diff], eax
    71                                          
    72                                          
    73 0000005F FF35[28000000]                  push dword[sum]
    74 00000065 68[0C000000]                    push printf_sum_format
    75 0000006A FF15[00000000]                  call [printf]
    76 00000070 83C408                          add esp, 4*2
    77                                          
    78 00000073 FF35[2C000000]                  push dword[diff]
    79 00000079 68[17000000]                    push printf_diff_format
    80 0000007E FF15[00000000]                  call [printf]
    81 00000084 83C408                          add esp, 4*2
    82                                          ; exit(0)
    83 00000087 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 00000089 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
