     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 614162423225784D            S db 'a', 'A', 'b', 'B', '2', '%', 'x', 'M'
    15 00000008 08                          lenS db $-S
    16 00000009 <res 00000008>              D resb $-S-1
    17                                      
    18                                      
    19                                      ; 29) A byte string S is given. Build the string D whose elements represent the sum of each two consecutive bytes of S.
    20                                  ;Example:
    21                                  ;S: 1, 2, 3, 4, 5, 6
    22                                  ;D: 3, 5, 7, 9, 11
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27 00000000 BE00000000                      mov ESI, 0
    28 00000005 B9[08000000]                    mov ECX, lenS
    29 0000000A BB00000000                      mov EBX, 0
    30 0000000F E318                            jecxz end_loop
    31                                          repeat_label:
    32 00000011 8A86[00000000]                      mov AL, [S+ESI]
    33 00000017 3C5A                                cmp AL, 'Z'
    34 00000019 770B                                ja not_a_uppercase_letter
    35 0000001B 3C41                                cmp AL, 'A'
    36 0000001D 7207                                jb not_a_uppercase_letter
    37                                  
    38 0000001F 8883[09000000]                      mov [D+EBX], AL
    39 00000025 43                                  inc EBX
    40                                              
    41                                              
    42                                              not_a_uppercase_letter:
    43 00000026 46                                  inc ESI
    44 00000027 E2E8                            loop repeat_label
    45                                          end_loop:
    46                                          ; exit(0)
    47 00000029 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 0000002B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    49                                  
    50                                          
