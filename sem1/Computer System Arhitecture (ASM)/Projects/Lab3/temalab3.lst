     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; 20) x-b+8+(2*a-b)/(b*b)+e; a-word; b-byte; e-doubleword; x-qword
    14 00000000 0500                        a dw 0x5
    15 00000002 02                          b db 0x2
    16 00000003 05000000                    e dd 0x5
    17 00000007 0500000000000000            x dq 0x5
    18 0000000F 0000                        s1 dw 0
    19 00000011 0000000000000000            rez dq 0
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 66B80200                        mov AX, 2
    26 00000004 66F72D[00000000]                imul word[a]
    27 0000000B 6652                            push DX
    28 0000000D 6650                            push AX
    29 0000000F 5B                              pop EBX
    30                                          ;ebx = a*2
    31                                          
    32 00000010 A0[02000000]                    mov AL, [b]
    33 00000015 6698                            cbw
    34 00000017 98                              cwde
    35 00000018 29C3                            sub ebx, eax
    36                                          ; ebx = a*2 - b
    37                                          
    38 0000001A A0[02000000]                    mov AL, [b]
    39 0000001F F62D[02000000]                  imul byte[b]
    40 00000025 6689C1                          mov CX, AX
    41                                          ; CX = b*b
    42                                          
    43 00000028 53                              push EBX
    44 00000029 6658                            pop AX
    45 0000002B 665A                            pop DX
    46 0000002D 66F7F9                          idiv CX
    47                                          ; AX = DX:AX/CX   DX = DX:AX%CX      (AX = int( (2*a-b)/(b*b) ) )
    48 00000030 0408                            add AL, 8
    49 00000032 80D400                          adc AH, 0
    50                                          
    51 00000035 6689C3                          mov BX, AX
    52 00000038 A0[02000000]                    mov AL, [b]
    53 0000003D 6698                            cbw
    54 0000003F 6629C3                          sub BX,AX
    55 00000042 6689D8                          mov AX,BX
    56                                          ;AX = s1+8-b
    57 00000045 668B1D[03000000]                mov BX, word[e]
    58 0000004C 668B0D[05000000]                mov CX, word[e+2]
    59                                          ;CX:BX = e
    60                                          
    61 00000053 6601C3                          add BX,AX
    62 00000056 6683D100                        adc CX,0
    63 0000005A 6651                            push CX
    64 0000005C 6653                            push BX
    65 0000005E 5B                              pop EBX
    66                                          ; EBX = s1 + 8 - b + e
    67                                          
    68 0000005F A1[07000000]                    mov EAX, [x]
    69 00000064 8B15[0B000000]                  mov EDX, [x+4]
    70                                          ;EDX:EAX = x
    71                                          
    72 0000006A 01D8                            add EAX, EBX
    73 0000006C 83D200                          adc EDX, 0
    74                                          
    75 0000006F A3[11000000]                    mov [rez], EAX
    76 00000074 8915[15000000]                  mov [rez+4], EDX
    77                                          ; final result in quadword "rez"
    78                                          
    79                                          ; exit(0)
    80 0000007A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    81 0000007C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
