     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 00000000                    suma dd 0
    17 0000000C 613D00                      message_a db "a=", 0
    18 0000000F 623D00                      message_b db "b=", 0
    19 00000012 5468652073756D2069-         message_result db  "The sum in decimal is: %d", 0
    19 0000001B 6E20646563696D616C-
    19 00000024 2069733A20256400   
    20 0000002C 257800                      format db "%x", 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 68[0C000000]                    push dword message_a
    26 00000005 FF15[00000000]                  call [printf]
    27 0000000B 83C404                          add esp, 4*1
    28                                          
    29 0000000E 68[00000000]                    push dword a
    30 00000013 68[2C000000]                    push dword format
    31 00000018 FF15[00000000]                  call [scanf]
    32 0000001E 83C408                          add esp, 4*2
    33                                          
    34 00000021 68[0F000000]                    push dword message_b
    35 00000026 FF15[00000000]                  call [printf]
    36 0000002C 83C404                          add esp, 4*1
    37                                          
    38 0000002F 68[04000000]                    push dword b
    39 00000034 68[2C000000]                    push dword format
    40 00000039 FF15[00000000]                  call [scanf]
    41 0000003F 83C408                          add esp, 4*2
    42                                          
    43 00000042 A1[00000000]                    mov eax, [a]           
    44 00000047 0305[04000000]                  add eax, [b]            
    45 0000004D A3[08000000]                    mov [suma], eax   
    46                                  
    47 00000052 FF35[08000000]                  push dword [suma]       
    48 00000058 68[12000000]                    push dword message_result 
    49 0000005D FF15[00000000]                  call [printf]          
    50 00000063 83C408                          add esp, 4*2  
    51                                         
    52                                      
    53                                          ; exit(0)
    54 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
