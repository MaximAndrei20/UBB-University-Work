     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  
     7                                  extern exit, printf, scanf, fprintf, fread, fopen              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 00<rept>                    s times 200 db 0
    17 000000C8 00<rept>                    formated_s times 200 db 0
    18 00000190 696E7075742E747874-         fileinput db "input.txt", 0
    18 00000199 00                 
    19 0000019A 6F75747075742E7478-         fileoutput db "output.txt", 0
    19 000001A3 7400               
    20 000001A5 7200                        acces_mode_r db "r",0
    21 000001A7 7700                        acces_mode_w db "w", 0
    22 000001A9 00000000                    fd_in dd 0
    23 000001AD 00000000                    fd_out dd 0
    24 000001B1 25640A00                    format_1 db "%d", 10, 0
    25 000001B5 257300                      scanf_format db "%s", 0
    26 000001B8 00<rept>                    input_from_user times 100 db 0
    27 0000021C 257300                      string_format db "%s", 0
    28 0000021F 00000000                    number_of_characters dd 0
    29 00000223 0A00                        empty_line_format db 10,0
    30 00000225 00000000                    number_of_spaces dd 0
    31                                  
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35 00000000 68[A5010000]                    push dword acces_mode_r
    36 00000005 68[90010000]                    push dword fileinput
    37 0000000A FF15[00000000]                  call [fopen]
    38 00000010 83C408                          add esp, 4*2
    39 00000013 A3[A9010000]                    mov [fd_in], eax
    40                                          
    41 00000018 68[A7010000]                    push dword acces_mode_w
    42 0000001D 68[9A010000]                    push dword fileoutput
    43 00000022 FF15[00000000]                  call [fopen]
    44 00000028 83C408                          add esp, 4*2
    45 0000002B A3[AD010000]                    mov [fd_out], eax
    46                                          
    47 00000030 FF35[A9010000]                  push dword [fd_in]
    48 00000036 68C8000000                      push dword 200
    49 0000003B 6A01                            push dword 1
    50 0000003D 68[00000000]                    push dword s
    51 00000042 FF15[00000000]                  call [fread]
    52 00000048 83C410                          add esp, 4*4
    53 0000004B A3[1F020000]                    mov [number_of_characters], eax
    54                                          
    55 00000050 FF35[1F020000]                  push dword [number_of_characters]
    56 00000056 68[B1010000]                    push dword format_1
    57 0000005B FF35[AD010000]                  push dword [fd_out]
    58 00000061 FF15[00000000]                  call [fprintf]
    59 00000067 83C40C                          add esp, 4*3
    60                                          
    61 0000006A 68[23020000]                    push dword empty_line_format
    62 0000006F FF35[AD010000]                  push dword [fd_out]
    63 00000075 FF15[00000000]                  call [fprintf]
    64 0000007B 83C408                          add esp, 4*2
    65                                          
    66 0000007E 8B0D[1F020000]                  mov ecx, [number_of_characters]
    67 00000084 BE[00000000]                    mov esi, s
    68 00000089 E30E                            jecxz end_loop
    69                                          
    70                                          count_spaces_loop:
    71 0000008B AC                                  lodsb
    72 0000008C 3C20                                cmp al, ' '
    73 0000008E 7507                                jne end_inner_loop
    74 00000090 8305[25020000]01                    add dword[number_of_spaces], 1
    75                                              
    76                                              end_inner_loop:
    77 00000097 E2F2                            loop count_spaces_loop
    78                                          end_loop:
    79                                          
    80 00000099 FF35[25020000]                  push dword [number_of_spaces]
    81 0000009F 68[B1010000]                    push dword format_1
    82 000000A4 FF35[AD010000]                  push dword [fd_out]
    83 000000AA FF15[00000000]                  call [fprintf]
    84 000000B0 83C40C                          add esp, 4*3
    85                                          
    86 000000B3 8B0D[1F020000]                  mov ecx, [number_of_characters]
    87 000000B9 BE[00000000]                    mov esi, s
    88 000000BE BF[C8000000]                    mov edi, formated_s
    89 000000C3 E30E                            jecxz end_loop2
    90                                          convert_to_upper:
    91 000000C5 AC                                  lodsb
    92 000000C6 3C61                                cmp al, 'a'
    93 000000C8 7206                                jb not_a_letter
    94 000000CA 3C7A                                cmp al, 'z'
    95 000000CC 7702                                ja not_a_letter
    96 000000CE 04E0                                add al, 'A'-'a'
    97                                              
    98                                              
    99                                              not_a_letter:
   100 000000D0 AA                                  stosb
   101 000000D1 E2F2                            loop convert_to_upper
   102                                          
   103                                          end_loop2:
   104                                          
   105 000000D3 68[C8000000]                    push dword formated_s
   106 000000D8 68[1C020000]                    push dword string_format
   107 000000DD FF35[AD010000]                  push dword [fd_out]
   108 000000E3 FF15[00000000]                  call [fprintf]
   109 000000E9 83C40C                          add esp, 4*3
   110                                          
   111                                          ; exit(0)
   112 000000EC 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   113 000000EE FF15[00000000]                  call    [exit]       ; call exit to terminate the program
