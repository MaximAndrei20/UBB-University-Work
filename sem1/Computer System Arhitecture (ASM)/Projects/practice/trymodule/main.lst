     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  %include "modul.asm"
     1                              <1> %ifndef _SUM_
     2                              <1> %define _SUM_
     3                              <1>     sum:
     4 00000000 8B442404            <1>         mov eax, [esp + 4]
     5 00000004 03442408            <1>         add eax, [esp+8]
     6 00000008 C3                  <1>         ret
     7                              <1> %endif
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000009 73756D206973203D20-         format db "sum is = %d", 10, 13, 0
    14 00000012 25640A0D00         
    15                                  
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19                                          ; ...
    20 00000000 6A03                            push dword 3
    21 00000002 6A05                            push dword 5
    22 00000004 E8(00000000)                    call sum
    23 00000009 83C408                          add esp, 2*4
    24                                          
    25 0000000C 50                              push eax
    26 0000000D 68[09000000]                    push format
    27 00000012 FF15[00000000]                  call [printf]
    28 00000018 83C408                          add esp, 2*4
    29                                          
    30                                          
    31                                          ; exit(0)
    32 0000001B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    33 0000001D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
