     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 06                          a db 6
    14 00000001 02                          b db 2
    15 00000002 03                          c db 3
    16 00000003 0A00                        d dw 10
    17 00000005 0000                        a10 dw 0
    18 00000007 0000                        bc4 dw 0
    19                                      
    20                                      
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; 25) [100-10*a+4*(b+c)]-d   
    26                                          
    27 00000000 B00A                            mov AL, 10
    28 00000002 8A1D[00000000]                  mov BL, [a]
    29 00000008 F6E3                            mul BL
    30 0000000A 66A3[05000000]                  mov [a10], AX
    31                                          ; a10 = a*10
    32                                          
    33 00000010 8A1D[01000000]                  mov BL, [b]
    34 00000016 021D[02000000]                  add BL, [c] ; BL = b+c
    35 0000001C B004                            mov AL, 4
    36 0000001E F6E3                            mul BL
    37 00000020 66A3[07000000]                  mov [bc4], AX
    38                                          ; bc4 = 4*(b+c)
    39                                          
    40 00000026 66B86400                        mov AX, 100
    41 0000002A 662B05[05000000]                sub AX, [a10]
    42 00000031 660305[07000000]                add AX, [bc4]
    43 00000038 662B05[03000000]                sub AX, [d]
    44                                          ; AX <- resultatul final
    45                                          
    46                                          ; exit(0)
    47 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
