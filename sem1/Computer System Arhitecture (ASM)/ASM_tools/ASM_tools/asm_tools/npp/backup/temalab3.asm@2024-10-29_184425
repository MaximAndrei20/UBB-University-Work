bits 32 ; assembling for the 32 bits architecture

; declare the EntryPoint (a label defining the very first instruction of the program)
global start        

; declare external functions needed by our program
extern exit               ; tell nasm that exit exists even if we won't be defining it
import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions

; our data is declared here (the variables needed by our program)
segment data use32 class=data
    ; 20) x-b+8+(2*a-b)/(b*b)+e; a-word; b-byte; e-doubleword; x-qword
    a dw 0x5
    b db 0x2
    e dd 0x5
    x dq 0x5
    s1 dw 0
    rez dq 0

; our code starts here
; 
segment code use32 class=code
    start:
        ; ...
        mov AX, 2
        imul word[a]
        push DX
        push AX
        pop EBX
        ;ebx = a*2
        
        mov AL, [b]
        cbw
        cwde
        sub ebx, eax
        ; ebx = a*2 - b
        
        mov AL, [b]
        imul byte[b]
        mov CX, AX
        ; CX = b*b
        
        push EBX
        pop AX
        pop DX
        idiv CX
        ; AX = DX:AX/CX   DX = DX:AX%CX      (AX = int( (2*a-b)/(b*b) ) )
        add AL, 8
        adc AH, 0
        
        mov BX, AX
        mov AL, [b]
        cbw
        sub BX,AX
        mov AX,BX
        ;AX = s1+8-b
        mov BX, word[e]
        mov CX, word[e+2]
        ;CX:BX = e
        
        add BX,AX
        adc CX,0
        push CX
        push BX
        pop EBX
        ; EBX = s1 + 8 - b + e
        
        mov EAX, [x]
        mov EDX, [x+4]
        ;EDX:EAX = x
        
        add EAX, EBX
        adc EDX, 0
        
        mov [rez], EAX
        mov [rez+4], EDX
        ; final result in quadword "rez"
        
        ; exit(0)
        push    dword 0      ; push the parameter for exit onto the stack
        call    [exit]       ; call exit to terminate the program
