Manual Execution of the Example

Graph Structure:
Activity, Duration, Prerequisites
0, 3,
1, 2, 0
2, 4, 0
3, 1, 1
4, 3, 1 2
5, 2, 3
6, 5, 4
7, 2, 5 6

Step 1: Represent the Graph
Vertices: {0, 1, 2, 3, 4, 5, 6, 7}
Edges with durations:
0 -> 1 (2), 0 -> 2 (4)
1 -> 3 (1), 1 -> 4 (3)
2 -> 4 (3)
3 -> 5 (2)
4 -> 6 (5)
5 -> 7 (2), 6 -> 7 (2)

Step 2: Check if the Graph is a DAG
- Calculate in-degrees:
  0: 0, 1: 1, 2: 1, 3: 1, 4: 2, 5: 1, 6: 1, 7: 2
- Perform topological sorting:
  Queue: [0]
  Process 0 -> Add 1, 2 to queue
  Process 1 -> Add 3, 4 to queue
  Process 2 -> Add 4 to queue
  Process 3 -> Add 5 to queue
  Process 4 -> Add 6 to queue
  Process 5 -> Add 7 to queue
  Process 6 -> Add 7 to queue
  Result: [0, 1, 2, 3, 4, 5, 6, 7]
- The graph is a DAG.

Step 3: Perform Topological Sorting
Topological Order: [0, 1, 2, 3, 4, 5, 6, 7]

Step 4: Calculate Earliest Start Times
- Initialize earliest_start: {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0}
- Process in topological order:
  0 -> 1: earliest_start[1] = max(0, 0 + 2) = 2
  0 -> 2: earliest_start[2] = max(0, 0 + 4) = 4
  1 -> 3: earliest_start[3] = max(0, 2 + 1) = 3
  1 -> 4: earliest_start[4] = max(0, 2 + 3) = 5
  2 -> 4: earliest_start[4] = max(5, 4 + 3) = 7
  3 -> 5: earliest_start[5] = max(0, 3 + 2) = 5
  4 -> 6: earliest_start[6] = max(0, 7 + 5) = 12
  5 -> 7: earliest_start[7] = max(0, 5 + 2) = 7
  6 -> 7: earliest_start[7] = max(7, 12 + 2) = 14
- Final earliest_start: {0: 0, 1: 2, 2: 4, 3: 3, 4: 7, 5: 5, 6: 12, 7: 14}

Step 5: Calculate Latest Start Times
- Initialize latest_start: {0: 14, 1: 14, 2: 14, 3: 14, 4: 14, 5: 14, 6: 14, 7: 14}
- Process in reverse topological order:
  7 -> 5: latest_start[5] = min(14, 14 - 2) = 12
  7 -> 6: latest_start[6] = min(14, 14 - 2) = 12
  6 -> 4: latest_start[4] = min(14, 12 - 5) = 7
  5 -> 3: latest_start[3] = min(14, 12 - 2) = 10
  4 -> 1: latest_start[1] = min(14, 7 - 3) = 4
  4 -> 2: latest_start[2] = min(14, 7 - 3) = 4
  3 -> 1: latest_start[1] = min(4, 10 - 1) = 4
  2 -> 0: latest_start[0] = min(14, 4 - 4) = 0
  1 -> 0: latest_start[0] = min(0, 4 - 2) = 0
- Final latest_start: {0: 0, 1: 4, 2: 4, 3: 10, 4: 7, 5: 12, 6: 12, 7: 14}

Step 6: Identify Critical Activities
- Compare earliest_start and latest_start for each edge:
  0 -> 1: earliest_start[0] == latest_start[0] and earliest_start[1] - earliest_start[0] == 2 -> Critical
  0 -> 2: earliest_start[0] == latest_start[0] and earliest_start[2] - earliest_start[0] == 4 -> Critical
  1 -> 3: earliest_start[1] == latest_start[1] and earliest_start[3] - earliest_start[1] == 1 -> Not Critical
  1 -> 4: earliest_start[1] == latest_start[1] and earliest_start[4] - earliest_start[1] == 3 -> Critical
  2 -> 4: earliest_start[2] == latest_start[2] and earliest_start[4] - earliest_start[2] == 3 -> Critical
  3 -> 5: earliest_start[3] == latest_start[3] and earliest_start[5] - earliest_start[3] == 2 -> Not Critical
  4 -> 6: earliest_start[4] == latest_start[4] and earliest_start[6] - earliest_start[4] == 5 -> Critical
  5 -> 7: earliest_start[5] == latest_start[5] and earliest_start[7] - earliest_start[5] == 2 -> Not Critical
  6 -> 7: earliest_start[6] == latest_start[6] and earliest_start[7] - earliest_start[6] == 2 -> Critical
- Critical Activities: [(0, 1, 2), (0, 2, 4), (1, 4, 3), (2, 4, 3), (4, 6, 5), (6, 7, 2)]

Step 7: Total Project Time
- Total time of the project: 14