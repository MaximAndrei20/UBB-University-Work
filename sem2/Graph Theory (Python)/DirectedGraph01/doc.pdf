---
description: |
    API documentation for modules: src.Domain.Graph.

lang: en

classoption: oneside
geometry: margin=1in
papersize: a4

linkcolor: blue
links-as-notes: true
...


    
# Module `src.Domain.Graph` {#id}







    
## Classes


    
### Class `Graph` {#id}




>     class Graph(
>         size
>     )










    
#### Methods


    
##### Method `add_edge` {#id}




>     def add_edge(
>         self,
>         u,
>         v,
>         w
>     )


Adds an edge to the graph
:param u: first vertex
:param v: second vertex
:param w: weight of the edge
:return:

    
##### Method `add_vertex` {#id}




>     def add_vertex(
>         self
>     )


Adds a new vertex to the graph

    
##### Method `bfs` {#id}




>     def bfs(
>         self,
>         start,
>         end
>     )


:param start: first vertex
:param end: second vertex
:return: a list with the path from start to end, empty if no path found

    
##### Method `copy_graph` {#id}




>     def copy_graph(
>         self
>     )


Returns a copy of the graph

    
##### Method `generate_random_graph` {#id}




>     def generate_random_graph(
>         self,
>         number_of_vertices,
>         number_of_edges
>     )


Generates a random graph
:param number_of_vertices: number of vertices of the new graph
:param number_of_edges: number of edges of the new graph

    
##### Method `get_edge_by_edge_id` {#id}




>     def get_edge_by_edge_id(
>         self,
>         edge_id
>     )


Returns the edge by edge id

    
##### Method `get_edge_endpoints` {#id}




>     def get_edge_endpoints(
>         self,
>         edge_id
>     )


Returns the endpoints of an edge by edge id

    
##### Method `get_edge_id` {#id}




>     def get_edge_id(
>         self,
>         u,
>         v
>     )


Returns the edge id of an edge
:param u: first vertex
:param v: second vertex

    
##### Method `get_in_degree` {#id}




>     def get_in_degree(
>         self,
>         vertex
>     )


Returns the in degree of a vertex

    
##### Method `get_number_of_strongly_connected_components` {#id}




>     def get_number_of_strongly_connected_components(
>         self
>     )


TODO: Implement this
:return:

    
##### Method `get_number_of_vertices` {#id}




>     def get_number_of_vertices(
>         self
>     )


:return: the number of vertices in the graph

    
##### Method `get_out_degree` {#id}




>     def get_out_degree(
>         self,
>         vertex
>     )


Returns the out degree of a vertex

    
##### Method `parse_inbound_edges` {#id}




>     def parse_inbound_edges(
>         self,
>         vertex
>     )


Returns an iterator over the inbound edges of a vertex

    
##### Method `parse_outbound_edges` {#id}




>     def parse_outbound_edges(
>         self,
>         vertex
>     )


Returns an iterator over the outbound edges of a vertex

    
##### Method `parse_vertices` {#id}




>     def parse_vertices(
>         self
>     )


:return: an iterator over the vertices in the graph

    
##### Method `read_from_file` {#id}




>     def read_from_file(
>         self,
>         file_name
>     )


Reads a graph from a file
:param file_name: the filename of the file to read from

    
##### Method `remove_edge` {#id}




>     def remove_edge(
>         self,
>         edge_id
>     )


Removes an edge from the graph
:param edge_id: edge id to be removed

    
##### Method `remove_vertex` {#id}




>     def remove_vertex(
>         self,
>         vertex
>     )


Removes a vertex from the graph
:param vertex: the index of the vertex to be removed

    
##### Method `set_edge_info` {#id}




>     def set_edge_info(
>         self,
>         edge_id,
>         new_cost
>     )


Sets the cost of an edge
:return:

    
##### Method `write_to_file` {#id}




>     def write_to_file(
>         self,
>         file_name
>     )


Writes the graph to a file
:param file_name: the name of the file to write to
:return:


-----
Generated by *pdoc* 0.11.3 (<https://pdoc3.github.io>).
